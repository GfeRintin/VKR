from aiogram import types, Dispatcher
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from data.theory_materials import PMLA, TECHREGULATION

# –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ –æ–¥–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É
theory_materials = {
    "–ü–ú–õ–ê": PMLA,
    "–¢–ï–•–†–ï–ì–õ–ê–ú–ï–ù–¢": TECHREGULATION
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
async def theory_section(callback_query: types.CallbackQuery):
    markup = InlineKeyboardMarkup()
    for doc in theory_materials.keys():
        markup.add(InlineKeyboardButton(doc, callback_data=f"theory_{doc[:3]}"))
    markup.add(InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu'))
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç:", reply_markup=markup)

async def show_theory_topics(callback_query: types.CallbackQuery):
    doc_short = callback_query.data[len('theory_'):]
    doc_full = next((d for d in theory_materials if d.startswith(doc_short)), None)
    if doc_full is None:
        await callback_query.message.edit_text("–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    markup = InlineKeyboardMarkup()
    for index, topic in enumerate(theory_materials[doc_full].keys()):
        topic_id = f"{index:02d}"
        markup.add(InlineKeyboardButton(topic, callback_data=f"theory_{doc_short}_{topic_id}"))
    markup.add(InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data='theory'))
    markup.add(InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu'))
    await callback_query.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–∑ {doc_full}:", reply_markup=markup)

async def send_theory_material(callback_query: types.CallbackQuery):
    data_parts = callback_query.data.split('_')
    if len(data_parts) != 3:
        await callback_query.message.edit_text("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    doc_short, topic_id = data_parts[1], int(data_parts[2])
    doc_full = next((d for d in theory_materials if d.startswith(doc_short)), None)
    if doc_full is None:
        await callback_query.message.edit_text("–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    topics = list(theory_materials[doc_full].keys())
    topic_full = topics[topic_id]
    if topic_full is None:
        await callback_query.message.edit_text("–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    material = theory_materials[doc_full][topic_full]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = material['text']


    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–î–∞–ª–µ–µ"
    markup = InlineKeyboardMarkup()
    if topic_id > 0:
        prev_topic_id = f"{topic_id - 1:02d}"
        markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Ç–µ–º–∞", callback_data=f"theory_{doc_short}_{prev_topic_id}"))
    if topic_id < len(topics) - 1:
        next_topic_id = f"{topic_id + 1:02d}"
        markup.add(InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Ç–µ–º–∞", callback_data=f"theory_{doc_short}_{next_topic_id}"))
    markup.add(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"theory_{doc_short}"))
    markup.add(InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu'))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–∞–∑–º–µ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
    if callback_query.message.text != text:
        await callback_query.message.edit_text(text, reply_markup=markup)
    else:
        await callback_query.message.edit_reply_markup(reply_markup=markup)

def register_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(theory_section, lambda c: c.data == 'theory')
    dp.register_callback_query_handler(show_theory_topics, lambda c: c.data.startswith('theory_') and len(c.data.split('_')) == 2)
    dp.register_callback_query_handler(send_theory_material, lambda c: c.data.startswith('theory_') and len(c.data.split('_')) == 3)
