from aiogram import types, Dispatcher
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext

from database import db

class AdminStates(StatesGroup):
    add_admin = State()
    remove_admin = State()

async def admin_panel(callback_query: types.CallbackQuery):
    if not db.is_admin(callback_query.from_user.id):
        await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data='view_all_users'))
    markup.add(InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", callback_data='view_admins'))
    markup.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data='add_admin'))
    markup.add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data='remove_admin'))
    markup.add(InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu'))
    await callback_query.message.edit_text("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å", reply_markup=markup)

async def view_all_users(callback_query: types.CallbackQuery):
    if not db.is_admin(callback_query.from_user.id):
        await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    users = db.get_all_users()
    if not users:
        await callback_query.message.edit_text("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–æ—Ö–æ–¥–∏–≤—à–∏—Ö —Ç–µ—Å—Ç—ã.")
        return

    text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    markup = InlineKeyboardMarkup()
    for user in users:
        username = user[1] if user[1] else f"ID: {user[0]}"
        markup.add(InlineKeyboardButton(username, callback_data=f'view_user_{user[0]}'))
    markup.add(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='admin'))
    await callback_query.message.edit_text(text, reply_markup=markup)

async def view_user_results(callback_query: types.CallbackQuery):
    if not db.is_admin(callback_query.from_user.id):
        await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    user_id = int(callback_query.data.split('_')[-1])
    results = db.get_test_results_for_user(user_id)
    if not results:
        await callback_query.message.edit_text("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    text = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n\n"
    for result in results:
        text += f"–î–æ–∫—É–º–µ–Ω—Ç: {result[0]}, –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {result[1]}, –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {result[2]}, –î–∞—Ç–∞: {result[3]}\n"
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='view_all_users'))
    await callback_query.message.edit_text(text, reply_markup=markup)
    
async def add_admin_start(callback_query: types.CallbackQuery, state: FSMContext):
    if not db.is_admin(callback_query.from_user.id):
        await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    await AdminStates.add_admin.set()
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='cancel_add_admin'))
    await callback_query.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=markup)


async def add_admin_finish(message: types.Message, state: FSMContext):
    if not db.is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    try:
        user_id = int(message.text)
        db.add_admin(user_id)
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å user_id {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        await state.finish()
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id.")

async def cancel_add_admin(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await admin_panel(callback_query)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å


async def remove_admin_start(callback_query: types.CallbackQuery, state: FSMContext):
    if not db.is_admin(callback_query.from_user.id):
        await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    admins = db.get_all_admins()
    if not admins:
        await callback_query.message.edit_text("–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    text = "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
    markup = InlineKeyboardMarkup()
    for admin in admins:
        markup.add(InlineKeyboardButton(str(admin[0]), callback_data=f'remove_admin_{admin[0]}'))
    markup.add(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='admin'))
    await callback_query.message.edit_text(text, reply_markup=markup)

async def remove_admin_finish(callback_query: types.CallbackQuery):
    if not db.is_admin(callback_query.from_user.id):
        await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    user_id = int(callback_query.data.split('_')[-1])
    db.remove_admin(user_id)
    await callback_query.message.edit_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å user_id {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")

async def view_admins(callback_query: types.CallbackQuery):
    if not db.is_admin(callback_query.from_user.id):
        await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    admins = db.get_all_admins_views()
    if not admins:
        await callback_query.message.edit_text("–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    text = "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"
    for admin in admins:
        username = admin[1] if admin[1] else f"ID: {admin[0]}"
        text += f"{username}\n"
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='admin'))
    await callback_query.message.edit_text(text, reply_markup=markup)


def register_handlers_admin(dp: Dispatcher):
    dp.register_callback_query_handler(admin_panel, lambda c: c.data == 'admin')
    dp.register_callback_query_handler(view_all_users, lambda c: c.data == 'view_all_users')
    dp.register_callback_query_handler(view_user_results, lambda c: c.data.startswith('view_user_'))
    dp.register_callback_query_handler(add_admin_start, lambda c: c.data == 'add_admin', state='*')
    dp.register_callback_query_handler(remove_admin_start, lambda c: c.data == 'remove_admin', state='*')
    dp.register_callback_query_handler(remove_admin_finish, lambda c: c.data.startswith('remove_admin_'), state='*')
    dp.register_callback_query_handler(cancel_add_admin, lambda c: c.data == 'cancel_add_admin', state='*')
    dp.register_message_handler(add_admin_finish, state=AdminStates.add_admin)
    dp.register_callback_query_handler(view_admins, lambda c: c.data == 'view_admins')
